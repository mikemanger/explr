{"version":3,"sources":["api/lastfm.js","api/api.js","script.js","map.js","screenshot.js"],"names":["api","lastfm","key","url","send","method","options","callback","retries","xhr","gotResponse","aborted","undefined","forEach","el","replace","tryGet","tries","cb","d3","json","e","d","clearTimeout","timeout","JSON","parse","response","error","errInfo","errorCode","try","console","log","setTimeout","bind","abort","superCount","window","csv","err","data","alias","nest","tag","toLowerCase","map","cname","name","getCountry","artist","responseData2","tempCid","tempCountryname","tname","troubleFound","running","toptags","length","t","i","cid","troubleCountries","troubleLanguages","id","countryName","getCountries","artists","checkCount","count","select","html","SESSION","total_artists","localStorage","stringify","STORED_ARTISTS","returnList","country","returnObject","push","Date","getTime","getTags","tags","getArtistInfo","artistInfo","data1","tagnamelist","image","description","bio","summary","recommendationRequests","cancelRecommendationRequests","getRecommendations","recommendations","USER_TAGS","slice","userTagObj","rollup","xhr1","tagCounts","topartists","a","num","xhr2","data2","hasTags","keys","sort","b","getFriends","document","CACHED_USERS","cached_users","CACHED_NO_COUNTRIES","no_countries","addArtistsWithNoCountry","listOfArtistsWithNoCountry","concat","noCountriesListEl","_art","append","style","visibility","pointer-events","getUserTags","alert","location","assign","origin","pathname","c","tagCount","topArtists","taglist","lim","Math","min","forbidden","nogood","user_tags","random","user","maxPage","currPage","countryCountObj","randomcountrylist","getAllArtists","responseData","confirm","clear","reload","total","totalPages","remove","artistNames","newArtist","playcount","dataObj","leaves","artistList","filter","putCountryCount","end","loader","transition","duration","each","delay","param","href","split","addEventListener","evt","keyCode","screenshot","render","ga","hitType","eventCategory","eventAction","eventLabel","nextTheme","substr","welcomeOverlay","selectAll","updateName","friendName","attr","friends","target","on","this","classed","theme","begin","floor","legend","colorArray","countryScore","throttleTimer","redraw","move","height","width","topo","projection","path","svg","g","countryNames","centered","zoom","behavior","scaleExtent","countryCount","color","mydomain","maxartists","maxplaycount","updateDimensions","innerHeight","getElementById","offsetWidth","getCountryPlaycount","numbersWithSpace","x","toString","updateScale","max","pow","E","scale","threshold","domain","range","drawPlays","closeButton","offsetL","offsetT","tooltip","infoContainer","cnameDiv","themes","blue_black","green_black","pink_black","pink_white","green_white","red_white","setup","geo","naturalEarth","translate","PI","call","click","class","draw","redrawMap","background-color","border-color","enter","insert","properties","offsetLeft","offsetTop","mouse","node","parseInt","clicked","removeArtistDiv","len","ceil","legend_labels","y","text1","text","getComputedTextLength","_","updateLegend","tr","sc","animate","event","s","highlightCountry","h","invert","makeArtistDiv","currentNoArtists","currentCount","showNextFive","showArtists","showPreviousFive","first","last","initial","artistDiv","data-artist","lowlight","highlight","makeSummaryDiv","recLoadingDiv","recLoadingMessage","src","display","margin","namelist","list","arr","Array","array","j","temp","shuffleArray","art","artistimg","artistname","recoArtistDiv","usertaglist","artisttaglist","summaryText","z","elem","pos","indexOf","offsetHeight","tagdiv","p","countryElement","k","bounds","modscaleX","modscaleY","pt","toTheme","themeList","body","countries","world","topojson","feature","objects","features","object","countryList","drawCenteredText","obj","ctx","font","fillText","string","w","measureText","lineWidth","strokeStyle","strokeText","titleString","explrLogo","Image","canvas","createElement","getContext","backgroundColor","getComputedStyle","textColor","fill","font-family","font-size","stroke","canvg","XMLSerializer","serializeToString","onload","save","globalAlpha","fillStyle","scoreString","fillRect","restore","drawImage","toDataURL","getElementsByClassName","close"],"mappings":"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","file":"../all.min.js","sourcesContent":["var api = api || {};\n\napi.lastfm = {};\napi.lastfm.key = \"865b1653dbe200905a5b75d9d839467a\";\napi.lastfm.url = \"https://ws.audioscrobbler.com/2.0/\";\n\n/**\n* Send an API call to last.fm\n* @param {String} method    The method name (e.g. \"library.getartists\")\n* @param {Array} options    An array of tuples (arrays with two elements)\n                            with options for the request: [\"key\", \"value\"]\n* @param {Function} callback    The callback function to call with the data\n                                returned from the request. Takes two arguments,\n                                error and data (callback(error, data))\n*/\napi.lastfm.send = function (method, options, callback, retries) {\n\tvar url = api.lastfm.url + \"?\" + \"method=\" + method + \"&api_key=\" +\n\t\tapi.lastfm.key + \"&format=json\";\n\tvar xhr, gotResponse, retries = undefined === retries ? 10 : retries,\n\t\taborted = false;\n\n\toptions.forEach(function (el) {\n\t\turl += \"&\" + el[0] + \"=\" +\n\t\t\t(el[1] + \"\")\n\t\t\t.replace(\"&\", \"%26\")\n\t\t\t.replace(\"/\", \"%2F\")\n\t\t\t.replace(\"+\", \"%2B\")\n\t\t\t.replace(\"\\\\\", \"%5C\");\n\t});\n\n\tfunction tryGet(tries, cb) {\n\t\txhr = d3.json(url, function (e, d) {\n\t\t\tif (aborted) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (e) { // we got an actual server error: 4xx, 5xx\n\t\t\t\td = JSON.parse(e.response);\n\t\t\t\t// now e and d are the same\n\t\t\t} else if (d.error) {\n\t\t\t\t// we got 200 BUT it's an error\n\t\t\t\te = d;\n\t\t\t}\n\n\t\t\t// console.log({\n\t\t\t// \te: e,\n\t\t\t// \td: d\n\t\t\t// });\n\n\t\t\tif (e) {\n\t\t\t\tvar errInfo = {\n\t\t\t\t\tmethod: method,\n\t\t\t\t\terrorCode: e.error,\n\t\t\t\t\ttry: tries,\n\t\t\t\t\toptions: options,\n\t\t\t\t};\n\t\t\t\t// alert(\"ERROR\");\n\t\t\t\tif ((\n\t\t\t\t\t\te.error === 29 || // Rate Limit Exceeded\n\t\t\t\t\t\te.error === 8 // Operation failed\n\t\t\t\t\t) && tries < retries) {\n\t\t\t\t\tconsole.log(\"Retry request: \", errInfo);\n\t\t\t\t\tsetTimeout(tryGet.bind(null, tries + 1, cb), tries * 3000);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (tries >= retries) {\n\t\t\t\t\tconsole.log(\"Retry failed after \" + retries + \" attempts, will stop trying.\", errInfo);\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\taborted = true;\n\t\t\t\t\te = \"ERROR\";\n\t\t\t\t\td = {\n\t\t\t\t\t\terror: \"Took to long to respond\"\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgotResponse = true;\n\t\t\tcb(e, d);\n\t\t});\n\t}\n\n\ttryGet(0, callback);\n\n\t// Abort if the request takes too long - it sometimes ballar ur and fails after a minute :(\n\tvar timeout = setTimeout(function () {\n\t\tif (!gotResponse) {\n\t\t\t//console.log(\"GET \" + url + \" took to long, aborting\");\n\t\t\txhr.abort();\n\t\t\tcallback(\"ERROR\", {\n\t\t\t\terror: \"Took to long to respond\"\n\t\t\t});\n\t\t}\n\t}, 20000);\n\n\treturn {\n\t\tabort: function () {\n\t\t\taborted = true;\n\t\t\txhr.abort();\n\t\t}\n\t};\n}","/*requires:\napi/lastfm.js\n*/\n\nvar api = api || {};\nvar superCount = 0;\n\n(function(window, document) {\n\td3.csv(\"assets/data/countries.csv\", function(err, data) {\n\t\talias = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\tif (d && d.tag) {\n\t\t\t\t\treturn d.tag.toLowerCase();\n\t\t\t\t} else {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map(data);\n\n\t\tcname = d3.nest()\n\t\t\t.key(function(d) {\n\t\t\t\treturn d.name.toLowerCase();\n\t\t\t})\n\t\t\t.map(data);\n\n\t\t/**\n\t\t * Tries to find out the country for a specified artist.\n\t\t * @param  {String}   artist   Name of the artist to get country for\n\t\t * @param  {Function} callback Callback function, called when the search is over (whether a country's been found or not)\n\t\t *                             The callback function takes one argument, this object:\n\t\t *\n\t\t *                             {\n\t\t *                             \t\"artist\": <artist name>,\n\t\t *                             \t\"country\": <country name>,\n\t\t *                             \t\"id\": <country id>,\n\t\t *                             \t\"tag\": <the tag that decided the country (e.g. Swedish for Sweden)>\n\t\t *                             }\n\t\t *\n\t\t * \t\t\t\t\t\t\t\tIf no country could be found, \"country\", \"tag\" and \"id\" are undefined.\n\t\t *\n\t\t */\n\t\tapi.getCountry = function(artist, callback) {\n\t\t\t// Get artists country code here, from last.fm or whatever\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]], function(err,\n\t\t\t\tresponseData2) {\n\t\t\t\tvar running = true; // To stop searching when a country-tag has been found\n\n\t\t\t\t// Return if something failed\n\t\t\t\tif (err || !responseData2.toptags || !responseData2.toptags.tag || !\n\t\t\t\t\tresponseData2.toptags.tag.length) {\n\t\t\t\t\tcallback({\n\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\t//Spara tillfälligt bästa träffen\n\t\t\t\tvar tempCid;\n\t\t\t\tvar tempCountryname;\n\t\t\t\tvar tname;\n\t\t\t\tvar troubleFound;\n\n\t\t\t\t// Else check for country-tags in the artist's tags\n\t\t\t\tresponseData2.toptags.tag.forEach(function (t, i) {\n\t\t\t\t\tif (running) {\n\t\t\t\t\t\ttname = t.name.toLowerCase();\n\t\t\t\t\t\tvar cid;\n\n\t\t\t\t\t\t//Lista med taggar vi vill dubbelkolla\n\t\t\t\t\t\tvar troubleCountries = [\"georgia\", \"ireland\"];\n\t\t\t\t\t\tvar troubleLanguages = [\"spanish\", \"french\", \"english\", \"portuguese\", \"russian\", \"italian\", \"japanese\", \"korean\", \"indian\", \"swedish\", \"irish\"];\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry { //Testar taggen mot landsnamn\n\t\t\t\t\t\t\tif (cname[tname] && cname[tname][0].id) { // sweden->sweden\n\t\t\t\t\t\t\t\t//Kollar lista med specialfall som ofta blir fel\n\t\t\t\t\t\t\t\ttroubleFound = false;\n\t\t\t\t\t\t\t\tfor (i = 0; i < troubleCountries.length; i++) {\n\t\t\t\t\t\t\t\t\tif (cname[tname][0].name.toLowerCase() == troubleCountries[i]) {\n\t\t\t\t\t\t\t\t\t\ttroubleFound = troubleCountries[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!troubleFound) { //Den här taggen är inget problem, fortsätt som vanligt\n\t\t\t\t\t\t\t\t\t\tcid = cname[tname][0].id; \n\t\t\t\t\t\t\t\t\t\tcountryName = cname[tname][0].name;\n\t\t\t\t\t\t\t\t} else { //Den här taggen finns med i listan, spara den temporärt och se om vi hittar något bättre!\n\t\t\t\t\t\t\t\t\ttempCid = cname[tname][0].id;\n\t\t\t\t\t\t\t\t\ttempCountryname = cname[tname][0].name;\n\t\t\t\t\t\t\t\t\t//console.log(\"Trouble found!     \" + tname);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Testar taggen mot demonymer\n\t\t\t\t\t\t\t} else if (alias[tname] && alias[tname][0].id) { // swedish->sweden\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ttroubleFound = false;\n\t\t\t\t\t\t\t\tfor (i = 0; i < troubleLanguages.length; i++) {\n\t\t\t\t\t\t\t\t\tif (alias[tname][0].tag.toLowerCase() == troubleLanguages[i]) {\n\t\t\t\t\t\t\t\t\t\ttroubleFound = troubleLanguages[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!troubleFound) { //Den här taggen är inget problem, fortsätt som vanligt\n\t\t\t\t\t\t\t\t\t\tcid = alias[tname][0].id;\n\t\t\t\t\t\t\t\t\t\tcountryName = alias[tname][0].name;\n\t\t\t\t\t\t\t\t} else { //Den här taggen finns med i listan, spara den temporärt och se om vi hittar något bättre!\n\t\t\t\t\t\t\t\t\ttempCid = alias[tname][0].id;\n\t\t\t\t\t\t\t\t\ttempCountryname = alias[tname][0].name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (cid) { // Vi hittade en bra tagg, kör som bvnligt!\n\t\t\t\t\t\t\t\tcallback({ // Call callback method\n\t\t\t\t\t\t\t\t\t\"artist\": artist,\n\t\t\t\t\t\t\t\t\t\"id\": cid,\n\t\t\t\t\t\t\t\t\t\"tag\": tname,\n\t\t\t\t\t\t\t\t\t\"name\": countryName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\trunning = false; // Stop searching for country-tags\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t//console.log(artist, tname)\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\tif (running) { // Vi hittade inget perfekt land. \n\t\t\t\t\tif (tempCid) { //go with backup plan, använd den problematiska taggen\n\t\t\t\t\t\tconsole.log(\"Potentially incorrect country for '\" + artist + \"': \" + tempCountryname + \", using only the tag '\" + troubleFound + \"'\");\n\t\t\t\t\t\t\tcallback({ // Call callback method\n\t\t\t\t\t\t\t\t\"artist\": artist,\n\t\t\t\t\t\t\t\t\"id\": tempCid,\n\t\t\t\t\t\t\t\t\"tag\": tname,\n\t\t\t\t\t\t\t\t\"name\": tempCountryname,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\trunning = false; // Stop searching for country-tags\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback({\n\t\t\t\t\t\t\t\"artist\": artist\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Returns a list of country objects for a list of artist names.\n\t\t *\n\t\t * Beware!!! overwrites localstorage.artists when done!!! woaps!!!!!! dododod!!!\n\t\t * @param  {Array}   artists  Array of artist names (String)\n\t\t * @param  {Function} callback Callback function. Argument is a list of country objects,\n\t\t *                             containing only those artists that have a country\n\t\t *                             associated with them. For object structure, see api.getCountry\n\t\t */\n\t\tapi.getCountries = function(artists, callback) {\n\t\t\tvar returnList = [],\n\t\t\t\tcount = 0;\n\t\t\t/**\n\t\t\t * Increases a count and checks if we've tried\n\t\t\t * to get country for all artists\n\t\t\t */\n\t\t\tvar checkCount = function() {\n\t\t\t\tcount++;\n\t\t\t\tsuperCount++;\n\t\t\t\td3.select(\"#loading-text\").html(\"Loading artists...<br>(\" + superCount + \"/\" + SESSION.total_artists + \")<br>You can start exploring,<br>but it might interfere<br>with loading your artists.\");\n\t\t\t\tif (count === artists.length) {\n\t\t\t\t\t// We done, save artists and call back\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n\t\t\t\t\tcallback(returnList);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get countries for all artists\n\t\t\tartists.forEach(function(el, i) {\n\t\t\t\t// first check stored artists to see if we've already checked this artist\n\t\t\t\tif (STORED_ARTISTS[el] && STORED_ARTISTS[el].country) {\n\t\t\t\t\tvar returnObject = STORED_ARTISTS[el].country;\n\t\t\t\t\treturnObject.artist = el;\n\t\t\t\t\treturnList.push(returnObject);\n\t\t\t\t\tcheckCount();\n\t\t\t\t} else {\n\t\t\t\t\tvar start = new Date().getTime();\n\n\t\t\t\t\tapi.getCountry(el, function(data) {\n\t\t\t\t\t\tSTORED_ARTISTS[el] = STORED_ARTISTS[el] || {};\n\t\t\t\t\t\t// console.error(data)\n\n\t\t\t\t\t\t// if (data.name) {\n\t\t\t\t\t\tSTORED_ARTISTS[el].country = {\n\t\t\t\t\t\t\t\"id\": data.id,\n\t\t\t\t\t\t\t\"name\": data.name,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturnList.push(data);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// console.log(\"apicall \" + (new Date().getTime() - start) + \" ms\");\n\n\t\t\t\t\t\t// Update loading div, whoah ugly code yeah whaddayagonnado\n\n\n\t\t\t\t\t\tcheckCount();\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n\t})\n\n\t/**\n\t * Get all tags for an artist.\n\t * @param  {String}   artist   Artist name\n\t * @param  {Function} callback Callback function. Takes one argument which is an array\n\t *                             of tag objects (see the last.fm api doc for tag object structure)\n\t */\n\tapi.getTags = function(artist, callback) {\n\t\t// Check if artist tags are already saved, if so return them\n\t\tif (STORED_ARTISTS[artist] && STORED_ARTISTS[artist].tags) {\n\t\t\t// console.log(\"Had in store, no api call\");\n\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t} else {\n\t\t\t// Create object in localstorage\n\t\t\tSTORED_ARTISTS[artist] = STORED_ARTISTS[artist] || {};\n\t\t\tSTORED_ARTISTS[artist].tags = [];\n\n\t\t\t// Get from lastfm\n\t\t\tapi.lastfm.send(\"artist.gettoptags\", [[\"artist\", artist]],\n\t\t\t\tfunction(err, responseData2) {\n\t\t\t\t\tSTORED_ARTISTS[artist].tags = responseData2.toptags.tag;\n\t\t\t\t\twindow.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n\t\t\t\t\tcallback(STORED_ARTISTS[artist].tags);\n\t\t\t\t});\n\t\t}\n\t}\n\n\tapi.getArtistInfo = function(artist, callback) {\n\t\tvar artistInfo = [];\n\n\t\tapi.lastfm.send(\"artist.getinfo\", [[\"artist\", artist]], function(err, data1) {\n\t\t\t//Creating a list of tag names\n\t\t\tvar tagnamelist = [];\n\t\t\tif (data1.artist.tags.tag) {\n\t\t\t\tdata1.artist.tags.tag.forEach(function(t, i) {\n\t\t\t\t\ttagnamelist.push(t.name);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tartistInfo.push({\n\t\t\t\tname: artist,\n\t\t\t\turl: data1.artist.url,\n\t\t\t\timage: data1.artist.image[3][\"#text\"],\n\t\t\t\tdescription: data1.artist.bio.summary,\n\t\t\t\ttags: tagnamelist\n\t\t\t})\n\t\t\tcallback(artistInfo);\n\t\t})\n\n\n\n\t}\n\n\t/**\n\t * Gets a list of artists with tags similar to the user's top tags, sorted in descending order.\n\t * Also included are which tags matched.\n\t *\n\t * Calling this function cancels previous requests initiated by this function.\n\t * @param  {String}   country  Name of country or country alias (sweden, swedish, your choice)\n\t * @param  {Function} callback Callback function. Argument is a list of artists.\n\t */\n\tvar recommendationRequests = [];\n\tapi.cancelRecommendationRequests = function () {\n\t\trecommendationRequests.forEach(function (xhr) {\n\t\t\txhr.abort();\n\t\t});\n\n\t\trecommendationRequests = [];\n\t}\n\tapi.getRecommendations = function (country, callback) {\n\t\tapi.cancelRecommendationRequests();\n\n\t\tvar recommendations = [];\n\n\t\t// get top tags for user\n\t\tvar toptags = USER_TAGS.slice(0, 15);\n\t\t// make tag list to an object (back n forthss)\n\t\tvar userTagObj = d3.nest().key(function(d) {\n\t\t\treturn d.tag;\n\t\t}).rollup(function(d) {\n\t\t\treturn d[0].count;\n\t\t}).map(toptags);\n\n\n\t\t//console.log(\"Got top tags for user!\")\n\n\t\t// Get top artists for tag country\n\t\tvar xhr1 = api.lastfm.send(\"tag.gettopartists\", [[\"tag\", country], [\"limit\", 100]], function(err, data1) {\n\t\t\t// Gotta count matching tags to then sort\n\t\t\tvar tagCounts = {};\n\n\t\t\t// Get the tags for these artists\n\t\t\t//console.log(data1, err)\n\t\t\tif (err || data1.error || !data1.topartists || !data1.topartists.artist) {\n\t\t\t\tcallback([]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar artists = data1.topartists.artist;\n\n\t\t\tartists.forEach(function(a, num) {\n\t\t\t\ttagCounts[a.name] = [];\n\t\t\t\tvar xhr2 = api.lastfm.send(\"artist.gettoptags\", [[\"artist\", a.name]], function(err, data2) {\n\t\t\t\t\tvar hasTags = !data2.error && (data2.toptags.tag ? true : false);\n\t\t\t\t\td3.select(\"#rec-loading-current\").html(\"(\" + a.name + \")\");\n\t\t\t\t\tif (hasTags) {\n\t\t\t\t\t\t// Compare top 10 tags to user tags\n\t\t\t\t\t\tvar tags = d3.nest().key(function(d) {\n\t\t\t\t\t\t\treturn d.name;\n\t\t\t\t\t\t}).map(data2.toptags.tag);\n\n\t\t\t\t\t\t// Get rid of justin bieber\n\t\t\t\t\t\tif (tags[country]) {\n\t\t\t\t\t\t\tfor (var i = data2.toptags.tag.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\t\tif (userTagObj[data2.toptags.tag[i].name] && data2.toptags.tag[i].count > 5) {\n\t\t\t\t\t\t\t\t\ttagCounts[a.name].push(data2.toptags.tag[i].name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (num === artists.length - 1) {\n\t\t\t\t\t\t//console.log(\"We've gotten tag counts for all artists, make a list!\")\n\t\t\t\t\t\td3.keys(tagCounts).forEach(function(d) {\n\t\t\t\t\t\t\trecommendations.push({\n\t\t\t\t\t\t\t\tname: d,\n\t\t\t\t\t\t\t\tcount: tagCounts[d].length,\n\t\t\t\t\t\t\t\ttags: tagCounts[d]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\trecommendations.sort(function(a, b) {\n\t\t\t\t\t\t\treturn b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t//console.log(recommendations)\n\t\t\t\t\t\tcallback(recommendations);\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\trecommendationRequests.push(xhr2);\n\t\t\t})\n\t\t})\n\n\t\trecommendationRequests.push(xhr1);\n\t}\n\n\tapi.getFriends = function(callback) {\n\t\tapi.lastfm.send(\"user.getFriends\", [[\"user\", SESSION.name]], callback);\n\t}\n})(window, document);\n","/* requires:\napi/api.js\napi/lastfm.js\n*/\n\nvar STORED_ARTISTS = JSON.parse(window.localStorage.artists || \"{}\");\nvar USER_TAGS = []; // JSON.parse(window.localStorage.user_tags || \"[]\");\nvar CACHED_USERS = JSON.parse(window.localStorage.cached_users || \"{}\");\nvar SESSION = {};\nvar CACHED_NO_COUNTRIES = JSON.parse(window.localStorage.no_countries || \"{}\");\n\n(function () {\n    // user = prompt(\"Input your user name, get top 20 artists\")\n    var user, currPage = 1,\n        maxPage;\n    var countryCountObj = {};\n    var count = 0;\n    var tries = 0;\n    var randomcountrylist = [\"Malawi\", \"Malaysia\", \"Peru\", \"Sierra Leone\", \"Trinidad & Tobago\", \"Greece\", \"Laos\", \"Iran\", \"Haiti\", \"Nicaragua\", \"Mongolia\", \"Slovakia\"];\n    var listOfArtistsWithNoCountry = [];\n\n    /**\n     * adds artists with no country to the array of artists with\n     * no country :)\n     * \n     * @param {*} data Response from api.getCountries; array of\n     * artists that may or may not have country\n     */\n    var addArtistsWithNoCountry = function (data) {\n        listOfArtistsWithNoCountry = listOfArtistsWithNoCountry.concat(data);\n\n        var noCountriesListEl = d3.select(\".no-countries ul\");\n        data.forEach(function (_art) {\n            noCountriesListEl.append(\"li\").html('<a href=\"' + _art.url + '\" target=\"blank\" class=\"no-countries__link\">' + _art.artist + '</a>');\n        })\n\n        window.localStorage.no_countries = JSON.stringify(listOfArtistsWithNoCountry);\n\n        if (listOfArtistsWithNoCountry.length) {\n            d3.select(\".no-countries\").style({\n                visibility: \"visible\",\n                \"pointer-events\": \"all\",\n            });\n        }\n    }\n\n    var getAllArtists = function () {\n        // console.log(\"get artists\")\n        \n        api.lastfm.send(\"library.getartists\", [\n                [\"user\", user],\n                [\"limit\", 50],\n                [\"page\", currPage]\n            ],\n            function (error, responseData) {\n                // Special case for unfortunate users\n                if (responseData === \"\") {\n                    console.error('Got empty string (\"\") as response, skipping page.')\n                    currPage++;\n                    getAllArtists();\n                    return;\n                }\n                if (error || responseData.error) {\n                    console.error(\"Error in getAllArtists, page \" + currPage, error, responseData);\n\n                    // Try again, but not forever\n                    if (tries++ < 5) {\n                        getAllArtists();\n\n                        // TODO: Show erorr message ;)\n                    } else {\n                        var refresh = confirm(\"Last.fm took too long to respond.\\n\\nPress OK to refresh the page and try again, or Cancel to use the page as it is.\");\n                        if (refresh) {\n                            window.localStorage.clear();\n                            window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n                            window.location.reload();\n                        }\n                    }\n                    return;\n                }\n\n                tries = 0;\n\n                if (currPage === 1) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                    maxPage = +responseData.artists[\"@attr\"].totalPages;\n\n                    if (SESSION.total_artists === 0) {\n                        d3.select(\".bubblingG\").remove();\n                        d3.select(\"#loading-text\")\n                            .html(\"You haven't listened to any<br> artists yet. Start scrobbling with <br>\\\n                                                        <a href='http://evolver.fm/2012/05/08/how-to-scrobble-to-last-fm-from-itunes-\" +\n                                \"spotify-and-more/'>your favorite music player!</a>\");\n                        d3.select(\".loader\").style(\"pointer-events\", \"all\");\n                        return;\n                    }\n                }\n\n                currPage++;\n                // console.log(\"Artists done, get countries\");\n\n                // Save artist data to localStorage (and create a list of artist names)\n                var artistNames = []\n                responseData.artists.artist.forEach(function (newArtist) {\n                    var a = STORED_ARTISTS[newArtist.name] || {};\n\n                    a.playcount = +newArtist.playcount;\n                    a.url = newArtist.url;\n\n                    a.image = [newArtist.image[3]];\n\n                    STORED_ARTISTS[newArtist.name] = a;\n                    artistNames.push(newArtist.name);\n                })\n                window.localStorage.artists = JSON.stringify(STORED_ARTISTS);\n                // var n = count++;\n\n                // Get country for all artists\n                api.getCountries(artistNames,\n                    function (data) {\n                        // Count plays for each country?\n                        // countryCountList = countryCountList.concat(data);\n                        var dataObj = d3.nest() //Gör så att man kan slå upp på land-id och få upp en lista på artister.\n                            .key(function (d) {\n                                return d.id;\n                            })\n                            .rollup(function (leaves) { //gör så att man får en lista på alla artister för ett land.\n                                return leaves;\n                            })\n                            .map(data); //Skickar in en lista med ett objekt för varje artist.\n\n                        d3.keys(dataObj).forEach(function (id) {\n                            countryCountObj[id] = countryCountObj[id] || {};\n                            countryCountObj[id][user] = countryCountObj[id][user] || [];\n                            var artistList = countryCountObj[id][user]; // list of artists for a country\n\n                            // if (artistList) {\n                            artistList = artistList.concat(dataObj[id]);\n\n                            //Lägger på de nya dataObj-elementen i countryCountObj-listan.\n                            // } else {\n                            //     artistList = dataObj[id];\n                            // }\n\n                            artistList.forEach(function (el, i) {\n                                //Här lägger vi till ett fält image med artistens bild-url som ett fält till det \"inre\" objektet.\n                                artistList[i].image = STORED_ARTISTS[el.artist].image[0][\"#text\"];\n                                artistList[i].url = STORED_ARTISTS[el.artist].url;\n                                artistList[i].playcount = STORED_ARTISTS[el.artist].playcount;\n                                // if (artistList[i].users) {\n                                //     artistList[i].users.push(user);\n                                // } else {\n                                //     artistList[i].users = [user];\n                                // }\n                            });\n                            //countryCountObj är en lista med \"country\"-objekt. \n                            //Varje country-objekt innehåller en lista med \"inre\" objekt med artistnamn, lands-id och landsnamn.\n                            //dataObj är typ samma som countryCountObj, fast är bara för de tillfälligt sparade artisterna (intervallet).\n                            countryCountObj[id][user] = artistList;\n                        })\n\n                        addArtistsWithNoCountry(data.filter(function (artist) {\n                            return !artist.id; // && artist.artist && artist.url;\n                        }));\n\n                        map.putCountryCount(countryCountObj);\n\n                        if (currPage > maxPage) {\n                            end();\n                            return;\n                        } else {\n                            getAllArtists();\n                        }\n                    });\n            });\n    }\n\n    var getRecommendations = function () {\n        var currPage = 1,\n            limit = 50,\n            maxPage = 1000 / limit;\n        var countriesList = JSON.parse(window.localStorage.countries);\n\n        var countriesObj = d3.nest().key(function (d) {\n            return d.name;\n        }).rollup(function (d) {\n            return d[0];\n        }).map(countriesList);\n        // Get \"all\" artists from one country\n        // countriesList.forEach(function(country){\n\n        // });\n        api.lastfm.send(\"tag.gettopartists\", [\n            [\"tag\", \"swedish\"],\n            [\"limit\", limit],\n            [\"page\", currPage]\n        ], function (err, data) {\n            var artists = data.topartists.artist;\n            // For each artist, get their tags\n            artists.forEach(function (a) {\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", a.name]\n                ], function (err, data) {\n                    // console.log(data);\n                })\n            })\n            // Look for user's top tags in artist tags\n            // If a lot of matches, save to recommended artists for that country\n        });\n\n    }\n\n    var getUserTags = function (err, data) {\n        // err = err ||data.error;\n        if (err || data.error) {\n            if (data && data.error === 6) {\n                alert(\"User not found\");\n                window.location.assign(window.location.origin + window.location.pathname);\n            }\n        }\n\n        \n        /*if (err || data.error) {\n            console.error(\"Erorr in getUserTags\", err, data);\n            alert(\"Something went wrong when contacting the Last.fm API\\n\\nEither:\\n - The specified user does not exist\\n - Last.fm is down\\n\\nPlease try again.\");\n            window.location.replace(window.location.origin + window.location.pathname);\n        }*/\n\n        var c = 0;\n\n        var tagCount = {};\n\n        //console.log(\"Gotta get tags\")\n\n        var topArtists = data.topartists.artist;\n        var done = function () {\n            // make list of tags to sort\n            USER_TAGS = [];\n            //Remove specific tags from user's top tags\n            forbidden = [\"american\", \"swedish\", \"british\", \"female vocalists\", \"male vocalists\", \"german\", \"seen live\", \"english\", \"singer-songwriter\", \"spanish\", \"french\"];\n            d3.keys(tagCount).forEach(function (el) {\n                var nogood = false\n                for (i = 0; i < forbidden.length; i++) {\n                    if (el === forbidden[i]) {\n                        nogood = true;\n                    }\n                }\n                if (!nogood) {\n                    USER_TAGS.push({\n                        tag: el,\n                        count: tagCount[el]\n                    });\n                }\n            })\n            USER_TAGS.sort(function (a, b) {\n                return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n            });\n            console.log(\"Done getting tags, saved to localStorage.user_tags\")\n            window.localStorage.user_tags = JSON.stringify(USER_TAGS);\n        }\n\n\n        topArtists.forEach(function (el, i) {\n            // get top ten tags and save to users tag count....\n            setTimeout(function () { // Set timeout to not stop artists from loading...\n                api.lastfm.send(\"artist.gettoptags\", [\n                    [\"artist\", el.name]\n                ], function (err, data) {\n                    taglist = data.toptags.tag;\n                    if (taglist) {\n                        var lim = Math.min(taglist.length, 10);\n                        for (var i = 0; i < lim; i++) {\n                            if (tagCount[taglist[i].name]) {\n                                tagCount[taglist[i].name]++;\n                            } else {\n                                tagCount[taglist[i].name] = 1;\n                            }\n                        }\n                        // console.log(c, topArtists.length)\n                    }\n\n                    c++;\n                    if (c == topArtists.length - 1) {\n                        done();\n                    }\n                });\n            }, Math.random() * 3000);\n        });\n\n    }\n\n    var begin = function () {\n        //Send analytics event\n        ga('send', 'event', 'splash screen', 'Go!', 'test');\n        // fade out username input box\n        var welcomeOverlay = d3.select(\"#welcome-container\");\n        welcomeOverlay.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                welcomeOverlay.remove();\n            });\n\n        // Fade in loader\n        d3.select(\".loader\").transition().duration(2000).style(\"opacity\", 1);\n        d3.select(\"#loading-text\").html(\"Getting library...\");\n        setTimeout(function () {\n            if (d3.select(\"#loading-text\").html() === \"Getting library...\") {\n                d3.select(\"#loading-text\").html(\"Last.fm is taking<br>a long time to<br>respond...\");\n\n                setTimeout(function () {\n                    if (d3.select(\"#loading-text\").html() === \"Last.fm is taking<br>a long time to<br>respond...\") {\n                        d3.select(\"#loading-text\").html(\"Maybe <a href='http://last.fm' target='_blank'>last.fm</a> has<br>gone offline...\")\n                            .style(\"pointer-events\", \"all\");\n                    }\n                }, 8000);\n            }\n        }, 8000);\n\n        // Fade in legend, progress-bar etc\n        d3.selectAll(\".on-map-view\").style({\n            \"visibility\": \"visible\",\n            //            \"opacity\": 0\n        }) //.transition().duration(1000).style(\"opacity\", 1);\n\n        // Get user tags\n        api.lastfm.send(\"user.gettopartists\", [\n            [\"user\", user],\n            [\"period\", \"12months\"],\n            [\"limit\", \"50\"]\n        ], getUserTags);\n\n        // Get user friends\n        api.getFriends(function (err, data) {\n            try {\n                var friends = data.friends.user;\n                var i = 0;\n                var friendName = d3.select(\"#friend-name\");\n\n                var updateName = function () {\n                    friendName.html(\"\");\n                    friendName.append(\"a\").attr({\n                        href: window.location.origin + window.location.pathname + \"?username=\" + friends[i].name,\n                        target: \"_self\",\n                    }).html(friends[i].name);\n                }\n\n                d3.selectAll(\".arrow\").on(\"click\", function () {\n                    if (d3.select(this).classed(\"left\")) {\n                        // Go left\n                        i = (i === 0 ? friends.length - 1 : i - 1);\n                    } else {\n                        // Go right\n                        i = (i + 1) % friends.length;\n                    }\n\n                    updateName();\n                })\n\n                updateName();\n                d3.select(\"#friends #msg\").html(\"Check out \" + user + \"'s friends\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n\n            } catch (e) {\n                console.error(\"getFriends()\", e);\n                d3.select(\"#friends\").html(\"&nbsp;Couldn't find any<br>friends on last.fm :(&nbsp;\")\n                d3.select(\"#friends\").transition().duration(1000).style(\"opacity\", 1);\n            }\n        });\n\n        if (CACHED_USERS[user]) {\n            // TODO: use timestamp\n            console.log(\"No new artists on last.fm!\");\n            countryCountObj = JSON.parse(window.localStorage.countryCountObj);\n            addArtistsWithNoCountry(JSON.parse(window.localStorage.no_countries));\n            \n            // Get number of artists for screenshot etc.\n            api.lastfm.send(\"library.getartists\", [\n                    [\"user\", user],\n                    [\"limit\", 1],\n                    [\"page\", 1]\n                ],\n                function (error, responseData) {\n                    SESSION.total_artists = +responseData.artists[\"@attr\"].total;\n                });\n\n            setTimeout(function () {\n                map.putCountryCount(countryCountObj);\n                end();\n            }, 1000)\n        } else {\n            // Save theme\n            var theme = window.localStorage.theme;\n            window.localStorage.clear();\n            if (theme) {\n                window.localStorage.theme = theme;\n            }\n            getAllArtists();\n        }\n    }\n\n    var end = function () {\n        // We're done, fade out loader\n        var loader = d3.select(\".loader\");\n        loader.transition().duration(2000)\n            .style(\"opacity\", 0)\n            .each(\"end\", function () {\n                loader.remove();\n            });\n        //Also fade out progress bar text (after a short delay)\n        d3.select(\"#progress-text\").transition().delay(5000).duration(1500)\n            .style(\"opacity\", 0);\n\n        CACHED_USERS = {};\n        CACHED_USERS[user] = new Date().getTime();\n        window.localStorage.cached_users = JSON.stringify(CACHED_USERS);\n        window.localStorage.countryCountObj = JSON.stringify(countryCountObj);\n    }\n\n    // // Set theme\n    // map.nextTheme(window.localStorage.theme || \"pink_white\");\n\n    // Try to get username from url\n    var param = window.location.href.split(\"username=\")[1];\n\n    if (param) { // We already have a user\n        // set up keyboard shortcuts\n        window.addEventListener(\"keydown\", function (evt) {\n            switch (evt.keyCode) {\n                // s\n                case 83:\n                    screenshot.render();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Take screenshot',\n                        eventLabel: 'test'\n                    });\n                    break;\n                    // t\n                case 84:\n                    nextTheme();\n                    //Send google analytics event\n                    ga('send', {\n                        hitType: 'event',\n                        eventCategory: 'Hotkeys',\n                        eventAction: 'Cycle theme',\n                        eventLabel: 'test'\n                    });\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        if (param.length > 15) {\n            param = param.substr(0, 15);\n        }\n        user = param;\n        SESSION.name = param;\n        begin();\n    } else {\n        d3.select(\"#welcome-container\").style(\"visibility\", \"visible\");\n        d3.select(\"#randomCountry\").html(randomcountrylist[Math.floor(Math.random() * (randomcountrylist.length))] + \"?\")\n    }\n})();","/* requires:\napi/api.js\napi/lastfm.js\nscript.js\n*/\n\nvar map = {};\n//White theme default:\nvar colorArray = [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"];\nvar legend;\nvar countryScore = 0;\n\n\n(function(window, document) {\n  d3.select(window).on(\"resize\", throttle);\n\n  var doThrottle = false;\n  var filter = \"artists\"; // filter by artists or plays\n\n  var zoom = d3.behavior.zoom()\n    .scaleExtent([1, 9])\n    .on(\"zoom\", move);\n\n\n  var height, width;\n\n  var topo, projection, path, svg, g, countryNames, rateById, centered, active;\n  countryCount = {};\n\n  //Variables needed to update scale and legend\n  var mydomain = [0, 1, 2, 3, 4, 5, 6];\n  var maxartists = 1,\n    maxplaycount = 0;\n\n  //Setting color and range to be used\n  var color;\n\n  // Set theme\n  var theme = window.localStorage.theme || \"pink_white\";\n\n  map.drawPlays = function() {\n    filter = \"scrobbles\";\n    redraw();\n  };\n\n  /**\n   * Sets width/height, i.e. changes the global variables \"width\" and \"height\"\n   */\n  function updateDimensions() {\n    height = window.innerHeight - 5;\n    width = document.getElementById('map-container').offsetWidth;\n  }\n\n  //Returns total number of plays for country\n  function getCountryPlaycount(c) {\n    if (countryCount[c.id]) {\n      var count = 0;\n      for (i = 0; i < countryCount[c.id].length; i++) {\n        count += countryCount[c.id][i].playcount;\n      }\n      return count;\n    } else return 0;\n  };\n\n\n  function updateProgressBar() {\n    var progressPro = (countryScore / 198);\n    return progressPro;\n  }\n;\n\n  //Function to format numbers over 1000 with a space\n  function numbersWithSpace(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n  }\n  /**\n   * Randomize array element order in-place.\n   * Using Fisher-Yates shuffle algorithm.\n   */\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  //Function to remove duplicates from arrays\n  function onlyUnique(value, index, self) {\n    return self.indexOf(value) === index;\n  }\n\n  function updateScale() {\n    var max = -1;\n    switch (filter) {\n      case \"artists\":\n        max = maxartists;\n        for (i = 0; i < 5; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 6) * (i + 1));\n        }\n        mydomain = [0, 1, mydomain[0], mydomain[1], mydomain[2], mydomain[3], mydomain[4]];\n        break;\n      case \"scrobbles\":\n        max = maxplaycount;\n        for (i = 0; i < 7; i++) {\n          mydomain[i] = Math.pow(Math.E, (Math.log(max) / 7) * (i + 1))\n        }\n        mydomain = [0, 1, mydomain[1], mydomain[2], mydomain[3], mydomain[4], mydomain[5]];\n        break;\n    };\n\n\n    color = d3.scale.threshold()\n      .domain(mydomain)\n      .range(colorArray);\n  };\n\n  function updateLegend() {\n    //Remove decimals from domain\n    var x = 0;\n    var len = mydomain.length\n    while (x < len) {\n      mydomain[x] = Math.ceil(mydomain[x]);\n      x++;\n    };\n\n    //Array of text\n    var legend_labels = [numbersWithSpace(mydomain[0]) + \"\", mydomain[1] + \"-\" + (mydomain[2] - 1), mydomain[2] + \"-\" + (mydomain[3] - 1), mydomain[3] + \"-\" + (mydomain[4] - 1), mydomain[4] + \"-\" + numbersWithSpace((mydomain[5] - 1)), numbersWithSpace(mydomain[5]) + \"-\" + numbersWithSpace((mydomain[6] - 1)), \"> \" + numbersWithSpace(mydomain[6])];\n\n    //Create Legend\n    svg.select(\"g#legend\").selectAll(\"g.legend\").remove(); // need to remove for theme changing :(\n    legend = svg.select(\"g#legend\").selectAll(\"g.legend\")\n      .data(mydomain);\n\n    //Color box sizes\n    var ls_w = 20,\n      ls_h = 20;\n    var x = width * 0.03;\n    var y = height * 0.03;\n\n    // Add legend filter text\n    var text1 = svg.select(\"#filter-text\")\n      .attr(\"x\", x)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(\"Number of \");\n    var text2 = svg.select(\"#filter\")\n      .attr(\"x\", x + text1[0][0].getComputedTextLength() + 5)\n      .attr(\"y\", height - y - mydomain.length * ls_h - 1.5 * ls_h)\n      .text(filter);\n    text2.on(\"click\", function() {\n      // Toggle filter method\n      filter = (filter === \"artists\" ? \"scrobbles\" : \"artists\");\n      redraw();\n    });\n\n    var noCountryArtists = d3.select(\".no-countries\")\n      .style(\"bottom\", (y + mydomain.length * ls_h + 1.5 * ls_h + 30) + \"px\"); // <<< magic numbers broo\n\n    var enter = legend.enter()\n      .append(\"g\")\n      .attr(\"class\", \"legend\");\n\n    enter.append(\"rect\")\n      .attr(\"x\", x)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - 2 * ls_h - y;\n      })\n      .attr(\"width\", ls_w)\n      .attr(\"height\", ls_h)\n      .style(\"fill\", function(d) {\n        return color(d);\n      });\n    enter.append(\"text\")\n      .attr(\"x\", x + 30)\n      .attr(\"y\", function(d, i) {\n        return height - (i * ls_h) - ls_h - 4 - y;\n      });\n\n    legend.selectAll(\"text\").data(mydomain)\n      .text(function(d, _, i) {\n        return legend_labels[i];\n      });\n  }\n  //Variables for color legend\n\n  var tooltip = d3.select(\"#map-container\").append(\"div\").attr(\"class\",\n    \"tooltip hidden\");\n\n  var infoContainer = d3.select(\"body\").append(\"div\").attr(\"class\",\n    \"infoContainer hidden\").attr(\"id\", \"infoContainer\");\n\n  var artistContainer = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"artistContainer\").attr(\"id\", \"artistContainer\");\n\n\n  var cnameDiv = d3.select(\"#infoContainer\").append(\"div\").attr(\"class\",\n    \"cnameDiv\").attr(\"id\", \"cname\");\n\n  var detailsDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"detailsDiv\").attr(\"id\", \"details\");\n\n  var recoDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"recoDiv\").attr(\"id\", \"recommendations\");\n\n  var artistSummaryDiv = d3.select(\"#artistContainer\").append(\"div\").attr(\"class\",\n    \"artistSummaryDiv\").attr(\"id\", \"summary\");\n\n  var closeButton;\n\n  var offsetL;\n  var offsetT;\n\n  //---------------------- Color preferences -------------//\n  var themes = {\n    blue_black: [\"#03020D\", \"#140E1F\", \"#2A075A\", \"#321C78\", \"#362688\", \"#3E3CA7\", \"#4651C5\", \"#5371F4\"],\n    green_black: [\"#03020D\", \"#08120C\", \"#032F30\", \"#064137\", \"#0E6745\", \"#158C54\", \"#1CB162\", \"#28EA78\"],\n    pink_black: [\"#03020D\", \"#1F0310\", \"#4B0627\", \"#5C1138\", \"#7E285C\", \"#A13F80\", \"#C355A4\", \"#F778DA\"],\n    pink_white: [\"#feebe2\", \"#feebe2\", \"#fcc5c0\", \"#fa9fb5\", \"#f768a1\", \"#dd3497\", \"#ae017e\", \"#7a0177\"],\n    green_white: [\"#ece2f0\", \"#F6EBFA\", \"#ccece6\", \"#99d8c9\", \"#66c2a4\", \"#41ae76\", \"#238b45\", \"#006d2c\"],\n    red_white: [\"#F0F0D8\", \"#F0F0D8\", \"#feb24c\", \"#fd8d3c\", \"#fc4e2a\", \"#e31a1c\", \"#bd0026\", \"#800026\"],\n  };\n\n  nextTheme = function(toTheme) {\n    // Go to next theme\n    var themeList = d3.keys(themes);\n    theme = toTheme || themeList[(themeList.indexOf(theme) + 1) % themeList.length];\n    colorArray = themes[theme];\n\n    //Change body class\n    d3.select(document.body).attr(\"class\", theme);\n\n    // Save :)\n    window.localStorage.theme = theme;\n\n    // Redraw map :)\n    if (topo) redraw();\n  }\n  map.nextTheme = nextTheme;\n\n  nextTheme(theme);\n  updateScale();\n  updateDimensions();\n  setup(width, height);\n\n  function setup(width, height) {\n    projection = d3.geo.naturalEarth()\n      .translate([(width / 2), (height / 2) + height * 0.08])\n      .scale(width / 1.7 / Math.PI);\n\n    path = d3.geo.path().projection(projection);\n\n    svg = d3.select(\"#map-container\").append(\"svg\")\n      .attr(\"id\", \"map-svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"margin-left\", document.getElementById(\"map-container\").offsetWidth / 2 - width / 2)\n      .call(zoom)\n      .on(\"click\", click)\n      .append(\"g\");\n\n    g = svg.append(\"g\");\n    svg.append(\"g\").attr(\"id\", \"legend\")\n    svg.append(\"text\").attr({\n      id: \"filter-text\",\n      class: \"legend\"\n    });\n    svg.append(\"text\").attr({\n      id: \"filter\",\n      class: \"legend\"\n    });\n  }\n\n  //Load country aliases and names\n  if (!window.localStorage.countries) {\n    d3.csv(\"assets/data/countries.csv\", function(err, countries) {\n      countryNames = countries;\n\n      countries.forEach(function(i) {\n        //Turning CSV values into numeric data\n        i.id = +i.id;\n      });\n\n      // save countries\n      window.localStorage.countries = JSON.stringify(countries);\n    });\n\n  } else {\n    countryNames = JSON.parse(window.localStorage.countries);\n  }\n  //Load map\n  d3.json(\"assets/data/world-50m.json\", function(error, world) {\n\n    var countries = topojson.feature(world, world.objects.countries).features;\n\n    topo = countries;\n    draw(topo, true);\n\n  });\n\n  function draw(topo, redrawMap) {\n    var country = g.selectAll(\".country\").data(topo);\n\n    var progress = d3.select(\"#progress-bar\").style({\n      \"height\": updateProgressBar() * 100 + \"%\",\n      \"background-color\": colorArray[6]\n    });\n    d3.select(\"#countryCount\").style({\n      \"background-color\": colorArray[1],\n      \"border-color\": colorArray[6]\n    })\n    //Show progressbar text on mouse-over\n    .on(\"mousemove\", function() {\n      d3.select(\"#progress-text\")\n        .transition().duration(150).style(\"opacity\", 0.9);\n    })\n      .on(\"mouseout\", function() {\n        d3.select(\"#progress-text\").transition().duration(150).style(\"opacity\", 0);\n      });\n    d3.select(\"#progress-text\").html(\"Scrobbled from \" + countryScore + \"/198 countries\")\n\n    //Draw countries\n    if (redrawMap) {\n      country.enter().insert(\"path\")\n        .attr(\"class\", \"country\")\n        .attr(\"d\", path)\n        .attr(\"id\", function(d, i) {\n          return d.id;\n        })\n        .attr(\"title\", function(d, i) {\n          return d.properties.name;\n        })\n        .style(\"fill\", function() {\n          return color(0);\n        });\n    }\n    //Color countries\n    country.transition().style(\"fill\", function(d) {\n      switch (filter) {\n        case \"artists\":\n          return countryCount[d.id] ? color(countryCount[d.id].length) :\n            color(0);\n          //break;\n        case \"scrobbles\":\n          return color(getCountryPlaycount(d));\n      }\n    })\n\n    //offsets for tooltips\n    offsetL = document.getElementById('map-container').offsetLeft;\n    offsetT = document.getElementById('map-container').offsetTop;\n\n    //tooltips\n    country\n      .on(\"mousemove\", function(d, i) {\n        var name;\n        var tag;\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        tooltip.classed(\"hidden\", false)\n          .attr(\"style\", \"left:\" + (mouse[0] + offsetL + 20) + \"px;top:\" + (\n            mouse[1] +\n            offsetT + 10) + \"px\")\n          .html(name + (countryCount[d.id] ? \"<br>\" + countryCount[d.id].length + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\" : \"\"));\n      })\n      .on(\"mouseout\", function(d, i) {\n        tooltip.classed(\"hidden\", true);\n      })\n      //Show div with top 10 artists for country when clicked\n      .on(\"click\", function(d, i) {\n        var name;\n        var tag;\n        var id;\n\n        clicked(d);\n\n        countryNames.forEach(function(e, i) {\n          if (e.id === d.id) {\n            name = e.name;\n            tag = e.tag;\n            id = d.id;\n          };\n        })\n        var mouse = d3.mouse(svg.node()).map(function(d) {\n          return parseInt(d);\n        });\n\n        closeButton\n          .on(\"click\", function(d, i) {\n            removeArtistDiv();\n            // zoom out map, fulhack\n            clicked(centered);\n          }) //\"stäng\" onclick slutar\n      }) // on click slutar\n\n  }\n  \n  /*-------redraw----*/\n  //den kallas varje gång datan uppdateras. redrawMap är en boolean \n  function redraw(redrawMap) {\n    updateDimensions();\n\n    if (redrawMap) {\n      d3.select('#map-svg').remove();\n      setup(width, height);\n    }\n\n    maxartists = d3.max(d3.keys(countryCount), function(cname) {\n      return countryCount[cname].length;\n    });\n    maxplaycount = d3.max(d3.keys(countryCount), function(cname) {\n      return getCountryPlaycount({\n        id: cname\n      });\n    })\n    updateScale();\n    updateLegend();\n\n    draw(topo, redrawMap);\n  }\n\n\n  /**\n   * Moves the map to the specified location or based on the current zoom event\n   * @param  {Array} tr      Optional: Translation tuple [x, y]\n   * @param  {Number} sc      Optional: Scale factor\n   * @param  {Boolean} animate Optional: Decides whether to animate the map movement\n   */\n  function move(tr, sc, animate) {\n    var t = tr || (d3.event ? d3.event.translate : false) || zoom.translate();\n    var s = sc || (d3.event ? d3.event.scale : false) || zoom.scale();\n\n    // If move was not initiated by clicking on a country, deselect the selected country\n    if (!tr && !sc && centered) {\n      highlightCountry(false);\n      removeArtistDiv();\n      centered = null;\n    }\n\n    var zscale = s;\n    var h = height / 4;\n\n    t[0] = Math.min(\n      (width / height) * (s - 1),\n      Math.max((width * 1.2) * (1 - s), t[0])\n    );\n\n    t[1] = Math.min(\n      h * (s - 1) + h * s,\n      Math.max(height * (1 - s) - h * s, t[1])\n    );\n\n    zoom.translate(t);\n    zoom.scale(s);\n\n    if (animate) {\n      g.transition().duration(950).attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n\n    } else {\n      g.attr(\"transform\", \"translate(\" + t + \")scale(\" + s + \")\");\n    }\n\n    //adjust the country hover stroke width based on zoom level\n    d3.selectAll(\".country\").style(\"stroke-width\", 1.5 / s);\n  }\n  map.move = move;\n\n  var throttleTimer;\n\n  function throttle() {\n    window.clearTimeout(throttleTimer);\n    throttleTimer = window.setTimeout(function() {\n      redraw(true);\n      move([0, 0], 1); // Reset position\n    }, 200);\n  }\n\n\n  //geo translation on mouse click in map\n  function click() {\n    var latlon = projection.invert(d3.mouse(this));\n    // console.log(latlon);\n    //console.log(countryCount);\n  }\n\n\n  /*----------------------------makeArtistDiv------------------------------------------------*/\n  //Skapar \"details-on-demand\"-divarna.\n  function makeArtistDiv(d) {\n\n    //lägga till namn till detailseDiv\n    var name;\n    var tag;\n    var recoms;\n    //var id;\n    countryNames.forEach(function(e, i) {\n      if (e.id === d.id) {\n        name = e.name;\n        tag = e.tag;\n        //id = d.id;\n      };\n    })\n    d3.select(\"#recommendations\").html(\"\");\n    //Show country name and info div on left hand side\n    infoContainer\n      .classed(\"hidden\", false)\n      .transition()\n      .style(\"opacity\", 1)\n      .duration(750);\n\n    //Hide progressbar when showing \n    d3.selectAll(\"#countryCount, .on-map-view\")\n      .classed(\"hidden\", true);\n\n    closeButton = d3.select('#infoContainer').append(\"button\").attr(\"type\", \"button\").attr(\"class\", \"close-button\").html(\"X\");\n\n    //Populate country information div\n    cnameDiv\n      .append(\"div\").attr(\"class\", \"cnameContainer\").attr(\"id\", \"cnameCont\")\n      .append(\"h1\").html(name);\n    d3.select(\"#cnameCont\").append(\"h5\")\n      .html(function() {\n        if (countryCount[d.id])\n          return numbersWithSpace(countryCount[d.id].length) + \" artists, \" + numbersWithSpace(getCountryPlaycount(d)) + \" scrobbles\"\n        else return \"No artists yet - Find new here ->\"\n      })\n\n\n    if (countryCount[d.id]) { //Om landet vi klickat på har lyssnade artister.\n\n      var currentNoArtists = 0;\n      var currentCount = 0;\n\n\n      d3.select(\"#details\").append(\"div\")\n        .html(\"<span>Your top artists tagged with </span><span class=\\\"demonym\\\">#\" + name + \"</span><span> or </span><span class=\\\"demonym\\\">#\" + tag + \"</span><span>: </span>\")\n        .attr(\"class\", \"topartists-desc\");\n      //Show top 5 artists\n\n      d3.select(\"#artistContainer\").append(\"i\")\n        .attr(\"class\", \"fa artist-control right fa-angle-right\")\n        .on(\"click\", function(){\n          showNextFive();\n        });\n\n      d3.select(\"#artistContainer\").append(\"i\")\n        .attr(\"class\", \"fa artist-control left disabled fa-angle-left\")\n        .on(\"click\", function(){\n          showPreviousFive();\n        });\n\n      function showNextFive(){\n        showArtists(currentNoArtists+1, currentNoArtists+5, false);\n        //Send event to google analytics\n        ga('send', {\n          hitType: 'event',\n          eventCategory: 'Artist viewer',\n          eventAction: 'Next five',\n          eventLabel: 'test'\n        });\n      }\n  \n      function showPreviousFive(){\n        showArtists(currentNoArtists-9, currentNoArtists-5, false);\n        //Trigger GA event\n        ga('send', {\n          hitType: 'event',\n          eventCategory: 'Artist viewer',\n          eventAction: 'Previous five',\n          eventLabel: 'test'\n        });\n      }\n\n      function showArtists(first, last, initial){\n        //Clean-up previous five artist images\n        d3.selectAll(\".scrobbled\").remove();\n        //console.log(\"displaying \"+first+\" to \"+last)\n\n        //Generate new artist images for all artists within the desired range!\n          for (i = first-1; i <= last-1; i++) {\n            if (countryCount[d.id][i]) {\n              //console.log(i+\" \"+countryCount[d.id][i].artist)\n              var artistDiv = d3.select(\"#details\").append(\"div\")\n                .attr({\n                  \"class\": \"scrobbled artist-div lowlight\",\n                  \"data-artist\": countryCount[d.id][i].artist\n                })\n                .on(\"click\", function() {\n                  // Lowlight not selected artists\n                  d3.selectAll(\".artist-div\").classed({\n                    \"lowlight\": true,\n                    \"highlight\": false\n                  });\n                  // Highlight selected artist\n                  d3.select(this).classed({\n                    \"highlight\": true,\n                    \"lowlight\": false\n                  });\n\n                  makeSummaryDiv(d3.select(this).attr(\"data-artist\"), []);\n                });\n\n              var artistLink = artistDiv.append(\"a\").style(\"display\", \"block\")\n              artistLink.append(\"div\")\n                .attr(\"class\", \"image-div\")\n                .style(\"background-image\", \"url(\" + \"'\" + countryCount[d.id][i].image + \"'\" + \" )\")\n                //.append(\"span\").attr(\"class\", \"overlayNo\").html(i+1);\n                \n              var playCountDiv = artistDiv.append(\"div\").attr(\"class\", \"play-count-div\");\n\n              playCountDiv.append(\"p\")\n                .html(\"<b>\" + countryCount[d.id][i].artist + \"</b><br>\" + countryCount[d.id][i].playcount + \" scrobbles\")\n                .attr(\"class\", \"details-p\");\n\n              currentCount++;\n            } else {\n              i = last;\n            }\n        }\n        //\n        //Check to see if we are moving backwards or forwards through the list..\n        if (first<currentNoArtists) //Backwards!\n          currentNoArtists = Math.ceil((currentNoArtists-currentCount)/5)*5;\n        else if (last>currentNoArtists) //Forwards!\n          currentNoArtists = currentNoArtists+currentCount;\n        //console.log(\"currentNoArtists är \"+currentNoArtists);\n\n        //Reset the count!\n        currentCount = 0;\n\n        //\n        //Disable and enable user controls\n        //\n        \n        //Left arrow...\n        if (currentNoArtists>=10 && !initial){\n          d3.selectAll(\".artist-control.left\")\n            .classed(\"disabled\", false)\n            .on(\"click\", function(){\n              showPreviousFive();\n            });\n        }\n        else{\n          d3.selectAll(\".artist-control.left\")\n            .classed(\"disabled\", true)\n            .on('click',function(){\n              d3.select(this).on('click',null); //Remove click listener!\n            });\n        }\n        //and right...\n        if (currentNoArtists>countryCount[d.id].length-1){ //There are no more artists!\n          d3.selectAll(\".artist-control.right\")\n            .classed(\"disabled\", true)\n            .on('click',function(){\n              d3.select(this).on('click',null); //Remove click listener!\n            });\n        }\n        else{\n          d3.selectAll(\".artist-control.right\")\n            .classed(\"disabled\", false)\n            .on(\"click\", function(){\n              showNextFive();\n            });\n        }\n      }\n      //Fetch the initial five artists!! \n      showArtists(1, 5, true);\n    \n      \n    } else { //Om landet vi klickat på inte har några lyssnade artister... \n      console.log(\"landet har inga lyssnade artister\");\n    }\n    //\"Recommended\"-heading\n    d3.select(\"#recommendations\").append(\"h4\")\n      .html(\"You may like: \")\n      .attr(\"class\", \"topartists-desc\");\n\n    // show loading message\n    var recLoadingDiv = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"recLoadingDiv\");\n    var recLoadingMessage = recLoadingDiv.append(\"span\")\n      .attr(\"id\", \"rec-loading\")\n      .html(\"Looking for artists tagged #\" + tag);\n    recLoadingDiv.append(\"img\")\n      .attr({\n        id: \"rec-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      })\n    recLoadingDiv.append(\"span\").attr(\"id\", \"rec-loading-current\");\n\n\n\n    //Get list of recommendations for country based on tags!\n    api.getRecommendations(tag, function(taglist) {\n      // Return if this callback is from an old (not active) country\n      if (!centered || centered.id !== d.id) {\n        return;\n      }\n      // Show loading message\n      recLoadingMessage.html(\"Looking for artists tagged #\" + name)\n\n      //Get list of recommendations for country based on country name!\n      api.getRecommendations(name, function(namelist) {\n        // Return if this callback is from an old (not active) country\n        if (!centered || centered.id !== d.id) {\n          return;\n        }\n        //Show loading message\n        recLoadingMessage.html(\"Loading images for recommended artists\");\n\n        //Join the two lists\n        var list = taglist.concat(namelist);\n\n        //Removing duplicates from the list!\n        var arr = {};\n        for (var i = 0; i < list.length; i++)\n          arr[list[i]['name']] = list[i];\n\n        list = new Array();\n        for (key in arr)\n          list.push(arr[key]);\n\n        list.sort(function(a, b) {\n          return b.count < a.count ? -1 : b.count > a.count ? 1 : 0;\n        });\n        //Get the first 20 artists\n        list = list.slice(0, 20);\n        //Randomize list\n        list = shuffleArray(list);\n\n        if (list.length === 0) { // Found no recommendations\n          recLoadingDiv.remove();\n          d3.select(\"#recommendations\").append(\"p\")\n            .html(\"We couldn't find any good \" + tag + \" recommendations for you :-( \");\n          d3.select(\"#recommendations\").append(\"a\").attr({\n            href: \"https://www.last.fm/tag/\" + name,\n            target: \"_blank\",\n          }).html(\"Try searching last.fm yourself!\");\n        }\n\n        for (i = 0; i < Math.min(list.length, 5); i++) {\n          // Return if this callback is from an old (not active) country\n          if (centered.id !== d.id) {\n            return;\n          }\n\n          var artisturl, artistimg, artistname;\n\n          //Get url and images for recommended artists!\n          api.getArtistInfo(list[i].name, function(art) {\n            recLoadingDiv.remove();\n            var artisturl = art[0].url;\n            var artistimg = art[0].image;\n            var artistname = art[0].name;\n\n\n            var recoArtistDiv = d3.select(\"#recommendations\").insert(\"div\", \"#summaryText\").attr(\"class\", \"artist-div lowlight\");\n            var recoArtistLink = recoArtistDiv.append(\"a\").style(\"display\", \"block\")\n              //.attr(\"href\", artisturl)\n              //.attr(\"target\", \"_blank\");\n            recoArtistLink.append(\"div\")\n              .attr(\"class\", \"image-div\")\n              .style(\"background-image\", \"url(\" + \"'\" + artistimg + \"'\" + \")\")\n\n            var recoArtistInfoDiv = recoArtistDiv.append(\"div\").attr(\"class\", \"recoArtistInfoDiv\");\n\n            recoArtistInfoDiv.append(\"p\")\n              .html(\"<b>\" + artistname + \"</b>\")\n              .attr(\"class\", \"details-p\");\n\n            recoArtistDiv.on(\"click\", function() {\n              d3.selectAll(\".artist-div\").classed({ // Lowlight not selected artists\n                \"lowlight\": true,\n                \"highlight\": false\n              });\n\n              d3.select(this).classed({ // Highlight selected artist\n                \"highlight\": true,\n                \"lowlight\": false\n              });\n              makeSummaryDiv(artistname);\n            });\n\n          })\n        }\n\n\n      })\n    });\n\n  }\n\n  function removeArtistDiv() {\n    api.cancelRecommendationRequests();\n\n    infoContainer.transition().style(\"opacity\", 0).duration(1000);\n    infoContainer.classed(\"hidden\", true);\n    d3.selectAll(\"#countryCount, .on-map-view\").classed(\"hidden\", false);\n    d3.selectAll(\".artist-div\").remove(\"div\");\n    d3.selectAll(\".close-button\").remove(\"button\");\n    d3.selectAll(\".details-h\").remove(\"p\");\n    d3.selectAll(\".details-h4\").remove(\"h4\");\n    d3.selectAll(\".recom-h4\").remove(\"h4\");\n    d3.selectAll(\".artist-control\").remove();\n    d3.selectAll(\".topartists-desc\").remove();\n\n    cnameDiv.classed(\"hidden\", true);\n    d3.select(\"#cnameCont\").remove(\"h1\");\n    d3.select(\"#cnameCont\").remove(\"h5\");\n  }\n\n  function makeSummaryDiv(artistname) {\n    var usertaglist = [];\n    //console.log(usertaglist);\n    var artisttaglist = [];\n\n    d3.select(\"#summaryText\").remove();\n    var summaryText = d3.select(\"#recommendations\").append(\"div\").attr(\"class\", \"summaryText\").attr(\"id\", \"summaryText\");\n    d3.select(\"#summaryText\").append(\"span\").html(\"Loading description of \" + artistname);\n    d3.select(\"#summaryText\").append(\"img\")\n      .attr({\n        id: \"sum-loading-img\",\n        src: \"assets/img/loader_horizontal.gif\"\n      })\n      .style({\n        display: \"inline-block\",\n        margin: \"0 5px\"\n      });\n\n    //Get artist info from Lastfm\n    api.getArtistInfo(artistname, function(art) {\n      var text = art[0].description.replace(/(\\n)+/g, '<br />');\n      //var text = text.substring(6);\n      //Get artist's top tags\n      artisttaglist = art[0].tags;\n      //Create list of user tags\n\n      //Make list of artist tags which are also user's top tags:\n      for (y = 0; y < 15; y++) {\n        for (z = 0; z < artisttaglist.length; z++) {\n          if (artisttaglist[z] === USER_TAGS[y].tag) {\n            usertaglist.push(USER_TAGS[y].tag)\n          }\n        }\n      }\n\n      //Create combined tag list and remove duplicates\n      var taglist = usertaglist.concat(artisttaglist);\n      taglist = taglist.filter(function(elem, pos) {\n        return taglist.indexOf(elem) == pos;\n      })\n      // Remove loading text\n      d3.select(\"#summaryText\").html(\"\");\n      //Create containing div\n      // Calculate height of infotextbox (so the scrollbar is inside the box and not on body)\n      var h = window.innerHeight * 0.90 - document.getElementById(\"artistContainer\").offsetHeight;\n      summaryText.style(\"max-height\", h + \"px\");\n\n      summaryText.append(\"h4\").html(artistname);\n\n      //Show top 7 tags\n      for (i = 0; i < Math.min(taglist.length, 6); i++) {\n        var tagdiv = summaryText.append(\"div\").attr(\"class\", \"tagdiv\").append(\"h4\").html(\"#\" + taglist[i]);\n        //Mark all user tags\n        for (p = 0; p < usertaglist.length; p++) {\n          if (taglist[i] === usertaglist[p])\n            tagdiv.classed(\"usertag\", true);\n        }\n      }\n      //Display artist summary\n      summaryText.append(\"p\").html(text || \"No description available - <a href='https://last.fm/music/\" + artistname + \"' target='_blank'>check out last.fm.</a>\");\n\n    })\n\n  }\n\n  /**\n   * Toggles highlight of a specified country\n   * @param  {Boolean} highlight      Specifies whether to highlight or \"dehighlight\"\n   * @param  {Object} countryElement The country element to highlight (needs to have an \"id\" property)\n   */\n  function highlightCountry(highlight, countryElement) {\n    d3.selectAll(\".country\").classed(\"highlighted\", false);\n\n    if (highlight) {\n      // Fade out all other countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", function() {\n          return (+this.id === +countryElement.id ? 1.0 : 0.3);\n        })\n\n      var ce = d3.select(document.getElementById(\"\" + countryElement.id)); // d3 can't select ids that are only numbers\n      ce.classed(\"highlighted\", true);\n    } else {\n      // Fade in all countries\n      d3.selectAll(\".country\").transition()\n        .style(\"opacity\", 1.0)\n    }\n\n  }\n\n  function clicked(d) { //d är det en har klickat på\n\n    var x, y, k;\n    //bounding box for clicked country\n    var b = path.bounds(d);\n\n    getCountryPlaycount(d);\n\n    //Set scale\n    var modscaleX = (b[1][0] - b[0][0]);\n    var modscaleY = (b[1][1] - b[0][1]);\n\n    //Dom't zoom too far with small countries!\n    if (modscaleX < 80)\n      modscaleX = 80;\n\n    //Landet är inte centrerat redan\n    if (d && centered !== d) {\n      centered = d;\n      removeArtistDiv();\n      makeArtistDiv(d);\n      highlightCountry(true, d);\n\n\n      //Special rules for special countries:\n      switch (d.id) {\n        case 840: //US\n          k = 3;\n          x = -(b[1][0] + b[0][0]) / 3;\n          y = -(b[1][1] + b[0][1]) / 1.7;\n          break;\n        case 250: //France\n          k = 7.012;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 3.4;\n          break;\n        case 528: //Netherlands\n          k = 9.0124;\n          x = -(b[1][0] + b[0][0]) / 1.5;\n          y = -(b[1][1] + b[0][1]) / 3.3;\n          break;\n        case 643: //Russia\n          k = 1.9;\n          x = -(b[1][0] + b[0][0]) / 1.25;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n        case 554: //New Zeeland\n          k = 4;\n          x = -(b[1][0] + b[0][0]) / 0.90;\n          y = -(b[1][1] + b[0][1]) / 1.8;\n          break;\n        case 36: //Australia\n          k = 3.3;\n          x = -(b[1][0] + b[0][0]) / 1.8;\n          y = -(b[1][1] + b[0][1]) / 2.1;\n          break;\n\n        default: //Everybody else\n          k = .55 / Math.max(modscaleX / width, modscaleY / height);\n          x = -(b[1][0] + b[0][0]) / 2 - (width / k) / 4;\n          y = -(b[1][1] + b[0][1]) / 2;\n          break;\n      }\n\n      //Landet är redan centrerat\n    } else {\n      x = -width / 2;\n      y = -height / 2 - height * 0.08;\n      k = 1\n      removeArtistDiv();\n      highlightCountry(false);\n      centered = null;\n\n      //detailsDiv.classed(\"hidden\", true);\n    }\n\n    var pt = projection.translate();\n    // Tell map to move with animation\n    // Basically does the same as before: translate to middle,\n    // then to x and y with respect to scale\n    move([pt[0] + x * k, pt[1] + y * k], k, true);\n\n  }\n\n  //function to add points and text to the map (used in plotting capitals)\n  function addpoint(lat, lon, text) {\n\n    var gpoint = g.append(\"g\").attr(\"class\", \"gpoint\");\n    var x = projection([lat, lon])[0];\n    var y = projection([lat, lon])[1];\n\n    gpoint.append(\"svg:circle\")\n      .attr(\"cx\", x)\n      .attr(\"cy\", y)\n      .attr(\"class\", \"point\")\n      .attr(\"r\", 1.5);\n\n    //conditional in case a point has no associated text\n    if (text.length > 0) {\n\n      gpoint.append(\"text\")\n        .attr(\"x\", x + 2)\n        .attr(\"y\", y + 2)\n        .attr(\"class\", \"text\")\n        .text(text);\n    }\n\n  }\n\n  /** \"PUBLUC\" FUNCTIONS **/\n  map.putCountryCount = function(object) {\n    countryCount = JSON.parse(JSON.stringify(object));\n    countryScore = 0;\n    var countryList = [];\n\n    // Extract info for the current user\n    d3.keys(countryCount).forEach(function(id) {\n      if (countryCount[id][SESSION.name]) {\n        countryCount[id] = countryCount[id][SESSION.name];\n        countryScore = countryScore + 1;\n        countryList.push(+id)\n      } else {\n        // delete countryCount[id];\n      }\n    })\n\n    if (topo) redraw();\n\n    window.countryScore = countryScore;\n\n  }\n})(window, document)\n","var screenshot = {};\n\n(function (window, document) {\n\tscreenshot.render = function () {\n\t\tvar titleString,\n\t\t\tsubtitleString = \"Make your own at explr.fm\",\n\t\t\timg;\n\n\t\tvar explrLogo = new Image();\n\n\t\tvar svg = d3.select(\"#map-svg\");\n\t\tvar w = svg.attr(\"width\");\n\t\tvar h = svg.attr(\"height\");\n\n\t\tvar canvas = document.createElement(\"canvas\");\n\t\tvar ctx = canvas.getContext(\"2d\");\n\n\t\t// canvg(canvas, document.getElementById(\"map-svg\").outerHTML);\n\n\t\tvar backgroundColor = window.getComputedStyle(document.body).backgroundColor;\n\t\tvar textColor = window.getComputedStyle(document.body).color;\n\n\t\tvar drawCenteredText = function (obj) {\n\t\t\tctx.font = obj.font;\n\t\t\tctx.fillText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\n\t\t\tif (obj.lineWidth) {\n\t\t\t\tctx.lineWidth = obj.lineWidth;\n\t\t\t\tctx.strokeStyle = obj.strokeStyle;\n\t\t\t\tctx.strokeText(obj.string, w / 2 - ctx.measureText(obj.string).width / 2, obj.y);\n\t\t\t}\n\t\t}\n\n\t\tcanvas.width = w;\n\t\tcanvas.height = h;\n\n\t\t// insert background rect\n\t\tsvg.insert(\"rect\", \"g\")\n\t\t\t.attr({\n\t\t\t\tid: \"background-rect\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\theight: \"100%\",\n\n\t\t\t})\n\t\t\t.style({\n\t\t\t\tfill: backgroundColor,\n\t\t\t});\n\n\t\t// Add color, font to legend text\n\t\td3.selectAll('.legend text, text.legend').style({\n\t\t\t\"font-family\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontFamily\"];\n\t\t\t},\n\t\t\t\"font-size\": function () {\n\t\t\t\treturn window.getComputedStyle(this)[\"fontSize\"];\n\t\t\t},\n\t\t\t\"fill\": textColor,\n\t\t});\n\t\td3.selectAll(\".legend rect\").style({\n\t\t\tstroke: backgroundColor,\n\t\t})\n\n\t\tcanvg(canvas, new XMLSerializer().serializeToString(svg[0][0]));\n\n\t\texplrLogo.onload = function () {\n\t\t\t/* Add text and shiiet */\n\t\t\t// Add text background box\n\t\t\tctx.save(); // To draw with different opaticy\n\t\t\tctx.globalAlpha = 0.6;\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tscoreString = SESSION.total_artists + \" artists from \" + countryScore + \" / 198 countries\";\n\t\t\ttitleString = SESSION.name + \"'s musical world map\";\n\t\t\tctx.font = \"34px Patua One\";\n\t\t\tctx.fillRect(w / 2 - ctx.measureText(titleString).width / 2 - 20, h - 110, ctx.measureText(titleString).width + 40, 100);\n\t\t\tctx.fillStyle = textColor;\n\n\t\t\t// Add text\n\t\t\tctx.fillStyle = textColor;\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: titleString,\n\t\t\t\tfont: \"34px Patua One\",\n\t\t\t\ty: h - 60,\n\t\t\t});\n\t\t\tdrawCenteredText({\n\t\t\t\tstring: scoreString,\n\t\t\t\tfont: \"20px Didact Gothic\",\n\t\t\t\ty: h - 40,\n\t\t\t});\n\n\t\t\t// Add explr.fm logo\n\t\t\tctx.restore();\n\t\t\tctx.drawImage(explrLogo, w - 130, h - 60, 100, 36);\n\n\t\t\td3.select(\"#background-rect\").remove();\n\n\t\t\t//console.log(canvas.toDataURL())\n\t\t\t// img = document.createElement(\"img\").src = canvas.toDataURL();\n\t\t\tdocument.getElementById(\"screenshot-img\").src = canvas.toDataURL(\"image/png\");\n\t\t\t// d3.select(\"body\").append(img);\n\t\t\t// \n\n\t\t\tvar dataurl = canvas.toDataURL(\"image/png\");\n\t\t\t// console.log(\"dataurl:\", dataurl)\n\n\t\t\t// window.open(dataurl, \"_blank\");\n\n\t\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"\";\n\t\t\t\n\t\t}\n\t\texplrLogo.src = \"assets/img/explrlogo.png\";\n\t}\n\n\tscreenshot.close = function () {\n\t\tdocument.getElementsByClassName(\"screenshot-overlay\")[0].style = \"display:none;\";\n\t}\n\n})(window, document);\n"]}